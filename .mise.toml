# mise configuration for docs repository
# Documentation management and quality automation

[settings]
experimental = true
auto_install = true
not_found_auto_install = true
jobs = 4
status = { missing_tools = "if_other_versions_installed", show_env = false, show_tools = false }

[tools]
# Language runtimes
"core:python" = "3.13.7"
"core:node" = "20.19.4"

# ALL CLI tools managed by mise (not devcontainer)
"aqua:koalaman/shellcheck" = "0.11.0"
"aqua:gitleaks/gitleaks" = "8.28.0"
fd = "latest"
rg = "latest"                         # ripgrep
eza = "latest"
jq = "latest"                          # JSON processor

# Additional tools for documentation
"npm:markdownlint-cli2" = "latest"
"npm:prettier" = "latest"
"npm:markdown-link-check" = "latest"
"npm:markdown-magic" = "latest"
"npm:tree-node-cli" = "latest"

# Run CI checks locally
act = "0.2.80"

[env]
# Set environment variables used by tasks
SCRIPTS_DIR = "./scripts"

# ============================================================================
# CORE TASKS - Primary developer actions
# ============================================================================

[tasks.default]
description = "Show available tasks"
run = "mise tasks"

[tasks.setup]
description = "Complete project setup for new contributors"
depends = ["setup:npm", "setup:pre-commit", "setup:act-symlink", "setup:verify"]

[tasks."setup:quick"]
description = "Quick setup script for new contributors"
run = "./scripts/setup.sh"

[tasks."setup:npm"]
description = "Install local npm dependencies"
run = "npm install"
sources = ["package.json", "package-lock.json"]
outputs = ["node_modules"]
[tasks."setup:pre-commit"]
description = "Setup pre-commit framework"
run = '''
pip install --quiet pre-commit detect-secrets
pre-commit install --install-hooks
pre-commit install --hook-type commit-msg
pre-commit install --hook-type pre-push
'''
outputs = [".git/hooks/pre-commit", ".git/hooks/pre-push"]

[tasks."setup:act-symlink"]
description = "Ensure act is symlinked for VS Code extension"
run = '''
# Check if act is installed via mise
if command -v act >/dev/null 2>&1; then
  ACT_PATH=$(which act)
  SYMLINK_PATH="/usr/local/bin/act"
  
  # Check if symlink already exists and points to correct location
  if [ -L "$SYMLINK_PATH" ] && [ "$(readlink -f $SYMLINK_PATH)" = "$(readlink -f $ACT_PATH)" ]; then
    echo "‚úÖ Act symlink already configured correctly"
  else
    echo "üîß Creating symlink for act..."
    sudo ln -sf "$ACT_PATH" "$SYMLINK_PATH"
    echo "‚úÖ Act symlinked to $SYMLINK_PATH"
  fi
  
  # Verify it works
  if $SYMLINK_PATH --version >/dev/null 2>&1; then
    echo "‚úÖ Act is accessible system-wide (version: $($SYMLINK_PATH --version))"
  else
    echo "‚ùå Failed to create working symlink" && exit 1
  fi
else
  echo "‚ö†Ô∏è  Act not installed, skipping symlink setup"
fi
'''
tools = { "act" = "0.2.80" }

[tasks."setup:mcp"]
description = "Generate .mcp.json from template using Infisical secrets"
run = "./scripts/generate-mcp-config.sh"
sources = ["mcp.json.template", "scripts/generate-mcp-config.sh", ".infisical.json"]
outputs = [".mcp.json"]
tools = { "jq" = "latest" }

[tasks."setup:verify"]
description = "Verify setup is complete"
run = '''
echo "üîç Verifying setup..."
[ -d node_modules ] || (echo "‚ùå npm dependencies missing" && exit 1)
[ -f .git/hooks/pre-commit ] || (echo "‚ùå pre-commit hooks missing" && exit 1)
command -v prettier >/dev/null || (echo "‚ùå prettier missing" && exit 1)
command -v markdownlint-cli2 >/dev/null || (echo "‚ùå markdownlint missing" && exit 1)
command -v fd >/dev/null || (echo "‚ùå fd missing" && exit 1)
command -v rg >/dev/null || (echo "‚ùå ripgrep missing" && exit 1)
[ -L /usr/local/bin/act ] && /usr/local/bin/act --version >/dev/null 2>&1 || echo "‚ö†Ô∏è  Act symlink not configured (VS Code extension may not work)"
echo "‚úÖ Setup verified!"
'''

# ============================================================================
# FORMATTING - Code style consistency
# ============================================================================

[tasks.fmt]
description = "Format all markdown files with Prettier"
alias = ["f", "format", "prettier"]
run = "prettier --write '**/*.md' --ignore-path .prettierignore"
sources = ["**/*.md", ".prettierrc.json", ".prettierignore"]
tools = { "npm:prettier" = "latest" }

[tasks."fmt:check"]
description = "Check formatting without changes"
alias = ["format-check", "prettier:check"]
run = "prettier --check '**/*.md' --ignore-path .prettierignore"
sources = ["**/*.md", ".prettierrc.json", ".prettierignore"]
tools = { "npm:prettier" = "latest" }

# ============================================================================
# LINTING - Code quality checks
# ============================================================================

[tasks.lint]
description = "Run all linters"
alias = "l"
depends = ["lint:md", "lint:shell", "lint:secrets"]

[tasks."lint:md"]
description = "Lint markdown files"
run = "markdownlint-cli2 '**/*.md' '!node_modules' '!.mise-data' '!.mise-cache' --config .markdownlint.json"
sources = ["**/*.md", ".markdownlint.json"]
tools = { "npm:markdownlint-cli2" = "latest" }

[tasks."lint:shell"]
description = "Lint shell scripts"
run = "fd -e sh -x shellcheck {}"
sources = ["**/*.sh"]
tools = { "aqua:koalaman/shellcheck" = "0.11.0", "fd" = "latest" }

[tasks."lint:secrets"]
description = "Check for secrets"
run = '''
gitleaks detect --no-git --verbose
detect-secrets scan --baseline .secrets.baseline 2>/dev/null || true
'''
tools = { "aqua:gitleaks/gitleaks" = "8.28.0" }

[tasks."lint:fix"]
description = "Auto-fix linting issues"
run = '''
markdownlint-cli2 '**/*.md' '!node_modules' '!.mise-data' '!.mise-cache' --config .markdownlint.json --fix
prettier --write '**/*.md' --ignore-path .prettierignore
'''
tools = { "npm:markdownlint-cli2" = "latest", "npm:prettier" = "latest" }

# ============================================================================
# QUALITY - Comprehensive checks
# ============================================================================

[tasks.check]
description = "Run all checks (format, lint, test)"
alias = ["q", "quality", "pre-commit"]
depends = ["fmt:check", "lint", "test"]

[tasks.ci]
description = "Run CI checks locally"
depends = ["fmt:check", "lint"]

[tasks.metrics]
description = "Generate quality metrics"
run = '''
echo "üìä Documentation Metrics"
echo "========================"
echo "üìÅ Markdown files: $(fd -e md | wc -l)"
echo "üìè Total lines: $(fd -e md -x wc -l | awk '{sum+=$1} END {print sum}')"
echo "üîó Internal links: $(rg '\[.*\]\(.*\)' -t md --count-matches | awk -F: '{sum+=$2} END {print sum}')"
issues=$(markdownlint-cli2 '**/*.md' --config .markdownlint.json 2>&1 | grep -c '^[^:]*\.md:' || echo "0")
echo "‚ö†Ô∏è  Lint issues: $issues"
'''
tools = { "fd" = "latest", "rg" = "latest", "npm:markdownlint-cli2" = "latest" }

# ============================================================================
# TESTING - Validation tasks
# ============================================================================

[tasks.test]
description = "Run all tests"
alias = "t"
depends = ["test:structure", "test:links"]

[tasks."test:structure"]
description = "Validate repository structure"
run = '''
for dir in mission-control flight-manuals star-charts maintenance-logs space-dictionary; do
  [ -d "$dir" ] || (echo "‚ùå Missing: $dir/" && exit 1)
  [ -f "$dir/README.md" ] || (echo "‚ùå Missing: $dir/README.md" && exit 1)
done
echo "‚úÖ Structure valid"
'''

[tasks."test:links"]
description = "Check for broken links"
run = "fd -e md -x markdown-link-check {}"
tools = { "fd" = "latest", "npm:markdown-link-check" = "latest" }

# ============================================================================
# AGENT VALIDATION - Claude sub-agent quality checks
# ============================================================================

[tasks."agents:validate"]
description = "Validate all agent YAML frontmatter"
run = '''
#!/usr/bin/env bash
echo "ü§ñ Validating Claude sub-agents frontmatter..."
errors=0
for agent in .claude/agents/*.md; do
  if [ ! -f "$agent" ]; then continue; fi
  name=$(basename "$agent" .md)
  printf "  %-20s " "$name:"
  
  # Check required fields
  if ! grep -q "^name: " "$agent"; then
    echo "‚ùå Missing name field"; errors=$((errors + 1))
  elif ! grep -q "^description: " "$agent"; then
    echo "‚ùå Missing description"; errors=$((errors + 1))
  elif ! grep -q "^tools: " "$agent"; then
    echo "‚ùå Missing tools"; errors=$((errors + 1))
  else
    echo "‚úÖ"
  fi
done

[ $errors -eq 0 ] && echo "‚úÖ All agents valid!" || echo "‚ùå Found $errors errors"
exit $errors
'''

[tasks."agents:check-tools"]
description = "Verify all tools listed in agents are valid Claude tools"
run = '''
#!/usr/bin/env bash
VALID_TOOLS="TodoWrite Read Write Edit MultiEdit Bash Glob Grep LS Task WebFetch WebSearch BashOutput KillBash NotebookEdit"

echo "üîß Checking agent tools..."
for agent in .claude/agents/*.md; do
  if [ ! -f "$agent" ]; then continue; fi
  name=$(basename "$agent" .md)
  echo "  $name:"
  tools=$(grep "^tools: " "$agent" | sed 's/tools: //')
  
  # Parse comma-separated tools
  echo "$tools" | tr ',' '\n' | while read tool; do
    tool=$(echo "$tool" | xargs) # trim whitespace
    if ! echo " $VALID_TOOLS " | grep -q " $tool "; then
      echo "    ‚ö†Ô∏è  Unknown tool: $tool"
    fi
  done
done
'''

[tasks."agents:check-descriptions"]
description = "Ensure agent descriptions follow best practices"
run = '''
#!/usr/bin/env bash
echo "üìù Checking agent descriptions..."
for agent in .claude/agents/*.md; do
  if [ ! -f "$agent" ]; then continue; fi
  name=$(basename "$agent" .md)
  desc=$(grep "^description: " "$agent" | sed 's/description: //')
  
  echo ""
  echo "Agent: $name"
  
  # Check for proactive keywords
  if echo "$desc" | grep -qE "PROACTIVELY|proactively"; then
    echo "  ‚úÖ Has proactive keyword"
  else
    echo "  ‚ÑπÔ∏è  Consider adding PROACTIVELY for automatic delegation"
  fi
  
  # Check description length
  length=$(echo -n "$desc" | wc -c)
  if [ $length -lt 50 ]; then
    echo "  ‚ö†Ô∏è  Description too short ($length chars)"
  elif [ $length -gt 300 ]; then
    echo "  ‚ö†Ô∏è  Description too long ($length chars)"
  else
    echo "  ‚úÖ Description length good ($length chars)"
  fi
  
  # Check for action verbs
  if echo "$desc" | grep -qE "^(Use|Specialist|Expert|Handles|Manages)"; then
    echo "  ‚úÖ Starts with action word"
  else
    echo "  ‚ÑπÔ∏è  Consider starting with action verb"
  fi
done
'''

[tasks."agents:check-structure"]
description = "Validate agent markdown structure and sections"
run = '''
echo "üìã Validating agent structure..."
REQUIRED_SECTIONS="Purpose Instructions"

for agent in .claude/agents/*.md; do
  if [ ! -f "$agent" ]; then continue; fi
  name=$(basename "$agent" .md)
  echo ""
  echo "Agent: $name"
  
  for section in $REQUIRED_SECTIONS; do
    if grep -q "^# $section" "$agent" || grep -q "^## $section" "$agent"; then
      echo "  ‚úÖ Has $section section"
    else
      echo "  ‚ùå Missing $section section"
    fi
  done
  
  # Check for examples
  if grep -q '```' "$agent"; then
    echo "  ‚úÖ Contains code examples"
  else
    echo "  ‚ö†Ô∏è  No code examples found"
  fi
  
  # Check for report format
  if grep -q "Report" "$agent" || grep -q "Output" "$agent"; then
    echo "  ‚úÖ Has report format section"
  else
    echo "  ‚ö†Ô∏è  No report format defined"
  fi
done
'''

[tasks."agents:list"]
description = "List all agents with their capabilities"
alias = ["agents", "list-agents"]
run = '''
#!/usr/bin/env bash
echo "üìä Claude Sub-Agents Inventory"
echo "=============================="
echo ""

total=0
for agent in .claude/agents/*.md; do
  if [ -f "$agent" ]; then
    name=$(grep "^name: " "$agent" | sed 's/name: //')
    desc=$(grep "^description: " "$agent" | sed 's/description: //' | cut -c1-60)
    tools=$(grep "^tools: " "$agent" | sed 's/tools: //' | cut -c1-40)
    
    total=$((total + 1))
    printf "[%d] %-20s\n" $total "$name"
    printf "    üìù %s...\n" "$desc"
    printf "    üîß %s...\n" "$tools"
    echo ""
  fi
done

echo "Total agents: $total"
'''

[tasks."agents:check-deps"]
description = "Check if agents have circular dependencies or missing tools"
run = '''
echo "üîÑ Checking agent dependencies..."

# Check if any agent calls Task tool (which could call other agents)
for agent in .claude/agents/*.md; do
  if [ ! -f "$agent" ]; then continue; fi
  name=$(basename "$agent" .md)
  if grep -q "Task" "$agent"; then
    echo "  ‚ÑπÔ∏è  $name can invoke other agents (uses Task tool)"
    
    # Look for subagent references
    grep -i "subagent\|agent-" "$agent" | grep -v "^#" | head -3 | while read line; do
      echo "      ‚Üí Reference: $(echo $line | cut -c1-60)..."
    done
  fi
done
'''

[tasks."agents:test"]
description = "Interactive agent testing prompt generator"
run = '''
echo "üß™ Agent Test Prompt Generator"
echo "=============================="
echo ""

agents=()
for agent in .claude/agents/*.md; do
  if [ -f "$agent" ]; then
    agents+=("$(basename "$agent" .md)")
  fi
done

echo "Available agents:"
for i in "${!agents[@]}"; do
  echo "  $((i+1)). ${agents[$i]}"
done

echo ""
read -p "Select agent number: " selection
index=$((selection-1))

if [ $index -ge 0 ] && [ $index -lt ${#agents[@]} ]; then
  agent_name="${agents[$index]}"
  agent_file=".claude/agents/${agent_name}.md"
  
  desc=$(grep "^description: " "$agent_file" | sed 's/description: //')
  
  echo ""
  echo "Test prompt for $agent_name:"
  echo "----------------------"
  echo "@agent-$agent_name please analyze the current repository and provide recommendations"
  echo ""
  echo "Description: $desc"
else
  echo "Invalid selection"
fi
'''

[tasks."agents:validate-all"]
description = "Run all agent validation checks"
depends = [
  "agents:validate",
  "agents:check-tools", 
  "agents:check-descriptions",
  "agents:check-structure"
]
alias = ["agents:check", "validate-agents"]

# ============================================================================
# DOCUMENTATION - Maintenance tasks
# ============================================================================

[tasks."docs:trees"]
description = "Update directory trees in documentation"
alias = "update-trees"
run = "md-magic README.md mission-control/core-github-repos.md --config ./markdown.config.js"
sources = ["markdown.config.js", "**/README.md"]
tools = { "npm:markdown-magic" = "latest", "npm:tree-node-cli" = "latest" }
[tasks."docs:serve"]
description = "Serve documentation locally"
run = '''
if [ -f "package.json" ] && grep -q '"serve"' package.json; then
  npm run serve
else
  echo "‚ÑπÔ∏è  No serve script configured"
fi
'''

[tasks."docs:search"]
description = "Search documentation content"
run = '''
echo "Enter search term: "
read term
rg "$term" -t md --heading --line-number
'''
tools = { "rg" = "latest" }

# ============================================================================
# UTILITY - Helper tasks
# ============================================================================

[tasks.mcp]
description = "MCP configuration management"
alias = "m"
tools = { "jq" = "latest" }
run = '''
echo "üîß MCP Configuration Management"
echo "================================"
if [ -f ".mcp.json" ]; then
  echo "‚úÖ .mcp.json exists"
  echo ""
  echo "Available actions:"
  echo "  1) Regenerate from template (overwrites current)"
  echo "  2) Validate JSON syntax"
  echo "  3) Show current servers"
  echo "  4) Exit"
  echo ""
  read -p "Choose action [1-4]: " choice
  case $choice in
    1) mise run setup:mcp ;;
    2) jq empty .mcp.json && echo "‚úÖ Valid JSON" || echo "‚ùå Invalid JSON" ;;
    3) jq '.mcpServers | keys[]' .mcp.json 2>/dev/null || echo "‚ùå Unable to parse servers" ;;
    4) echo "Exiting..." ;;
    *) echo "Invalid choice" ;;
  esac
else
  echo "‚ùå .mcp.json not found"
  echo ""
  if [ -f "mcp.json.template" ]; then
    echo "Template found. Generate config? (y/n)"
    read -p "> " confirm
    [ "$confirm" = "y" ] && mise run setup:mcp
  else
    echo "No template found. Please create mcp.json.template first."
  fi
fi
'''

[tasks."mcp:clean"]
description = "Remove generated MCP configuration"
run = '''
if [ -f ".mcp.json" ]; then
  echo "‚ö†Ô∏è  This will delete .mcp.json (can be regenerated from template)"
  read -p "Continue? (y/n): " confirm
  if [ "$confirm" = "y" ]; then
    rm -f .mcp.json
    echo "‚úÖ .mcp.json removed"
  else
    echo "Cancelled"
  fi
else
  echo "No .mcp.json file to remove"
fi
'''

[tasks.clean]
description = "Clean temporary files"
alias = "c"
run = '''
fd -H -I -t f -e DS_Store -x rm {}
fd -H -I -t f -e tmp -x rm {}
fd -H -I -t f -g '*~' -x rm {}
rm -rf .mise/cache 2>/dev/null || true
'''
tools = { "fd" = "latest" }

[tasks.watch]
description = "Watch files and run checks on change"
run = '''
echo "üëÄ Watching for changes (Ctrl+C to stop)..."
npx nodemon --watch '**/*.md' --watch '.markdownlint.json' --watch '.prettierrc.json' \
  --ext md --exec 'mise run check || true'
'''
tools = { "npm:nodemon" = "latest" }

[tasks.find]
description = "Find files by pattern"
run = '''
echo "Enter file pattern (e.g., '*.md', 'README*'): "
read pattern
fd "$pattern"
'''
tools = { "fd" = "latest" }

# Task aliases for common workflows
[tasks.p]
alias = "check" # p for pre-commit

# Hooks demo
[hooks]
enter = "echo 'Welcome to the docs repository!'"
leave = "echo 'Goodbye!'"
