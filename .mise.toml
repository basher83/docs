# mise configuration for docs repository
# Documentation management and quality automation

[settings]
experimental = true
auto_install = true
not_found_auto_install = true
jobs = 4
status = {missing_tools = "if_other_versions_installed", show_env = false, show_tools = false}

[tools]
# Language runtimes
"core:python" = "3.12.11"
"core:node" = "20.19.4"

# ALL CLI tools managed by mise (not devcontainer)
"aqua:koalaman/shellcheck" = "0.11.0"
"aqua:gitleaks/gitleaks" = "8.28.0"
fd = "latest"
rg = "latest"  # ripgrep
eza = "latest"

# Additional tools for documentation
"npm:markdownlint-cli2" = "latest"
"npm:prettier" = "latest"
"npm:markdown-link-check" = "latest"

[env]
# Set environment variables used by tasks
SCRIPTS_DIR = "./scripts"

# ============================================================================
# CORE TASKS - Primary developer actions
# ============================================================================

[tasks.default]
description = "Show available tasks"
run = "mise tasks"

[tasks.setup]
description = "Complete project setup for new contributors"
depends = ["setup:npm", "setup:pre-commit", "setup:verify"]

[tasks."setup:quick"]
description = "Quick setup script for new contributors"
run = "./scripts/setup.sh"

[tasks."setup:npm"]
description = "Install local npm dependencies"
run = "npm install"
sources = ["package.json", "package-lock.json"]
outputs = ["node_modules"]
[tasks."setup:pre-commit"]
description = "Setup pre-commit framework"
run = '''
pip install --quiet pre-commit detect-secrets
pre-commit install --install-hooks
pre-commit install --hook-type commit-msg
pre-commit install --hook-type pre-push
'''
outputs = [".git/hooks/pre-commit", ".git/hooks/pre-push"]

[tasks."setup:verify"]
description = "Verify setup is complete"
run = '''
echo "🔍 Verifying setup..."
[ -d node_modules ] || (echo "❌ npm dependencies missing" && exit 1)
[ -f .git/hooks/pre-commit ] || (echo "❌ pre-commit hooks missing" && exit 1)
command -v prettier >/dev/null || (echo "❌ prettier missing" && exit 1)
command -v markdownlint-cli2 >/dev/null || (echo "❌ markdownlint missing" && exit 1)
command -v fd >/dev/null || (echo "❌ fd missing" && exit 1)
command -v rg >/dev/null || (echo "❌ ripgrep missing" && exit 1)
echo "✅ Setup verified!"
'''

# ============================================================================
# FORMATTING - Code style consistency
# ============================================================================

[tasks.fmt]
description = "Format all markdown files with Prettier"
alias = ["f", "format", "prettier"]
run = "prettier --write '**/*.md'"
sources = ["**/*.md", ".prettierrc.json"]
tools = {"npm:prettier" = "latest"}

[tasks."fmt:check"]
description = "Check formatting without changes"
alias = ["format-check", "prettier:check"]
run = "prettier --check '**/*.md'"
sources = ["**/*.md", ".prettierrc.json"]
tools = {"npm:prettier" = "latest"}

# ============================================================================
# LINTING - Code quality checks
# ============================================================================

[tasks.lint]
description = "Run all linters"
alias = "l"
depends = ["lint:md", "lint:shell", "lint:secrets"]

[tasks."lint:md"]
description = "Lint markdown files"
run = "markdownlint-cli2 '**/*.md' --config .markdownlint.json"
sources = ["**/*.md", ".markdownlint.json"]
tools = {"npm:markdownlint-cli2" = "latest"}

[tasks."lint:shell"]
description = "Lint shell scripts"
run = "fd -e sh -x shellcheck {}"
sources = ["**/*.sh"]
tools = {"aqua:koalaman/shellcheck" = "0.11.0", "fd" = "latest"}

[tasks."lint:secrets"]
description = "Check for secrets"
run = '''
gitleaks detect --no-git --verbose
detect-secrets scan --baseline .secrets.baseline 2>/dev/null || true
'''
tools = {"aqua:gitleaks/gitleaks" = "8.28.0"}

[tasks."lint:fix"]
description = "Auto-fix linting issues"
run = '''
markdownlint-cli2 '**/*.md' --config .markdownlint.json --fix
prettier --write '**/*.md'
'''
tools = {"npm:markdownlint-cli2" = "latest", "npm:prettier" = "latest"}

# ============================================================================
# QUALITY - Comprehensive checks
# ============================================================================

[tasks.check]
description = "Run all checks (format, lint, test)"
alias = ["q", "quality", "pre-commit"]
depends = ["fmt:check", "lint", "test"]

[tasks.ci]
description = "Run CI checks locally"
depends = ["fmt:check", "lint"]

[tasks.metrics]
description = "Generate quality metrics"
run = '''
echo "📊 Documentation Metrics"
echo "========================"
echo "📁 Markdown files: $(fd -e md | wc -l)"
echo "📏 Total lines: $(fd -e md -x wc -l | awk '{sum+=$1} END {print sum}')"
echo "🔗 Internal links: $(rg '\[.*\]\(.*\)' -t md --count-matches | awk -F: '{sum+=$2} END {print sum}')"
issues=$(markdownlint-cli2 '**/*.md' --config .markdownlint.json 2>&1 | grep -c '^[^:]*\.md:' || echo "0")
echo "⚠️  Lint issues: $issues"
'''
tools = {"fd" = "latest", "rg" = "latest", "npm:markdownlint-cli2" = "latest"}

# ============================================================================
# TESTING - Validation tasks
# ============================================================================

[tasks.test]
description = "Run all tests"
alias = "t"
depends = ["test:structure", "test:links"]

[tasks."test:structure"]
description = "Validate repository structure"
run = '''
for dir in mission-control flight-manuals star-charts maintenance-logs space-dictionary; do
  [ -d "$dir" ] || (echo "❌ Missing: $dir/" && exit 1)
  [ -f "$dir/README.md" ] || (echo "❌ Missing: $dir/README.md" && exit 1)
done
echo "✅ Structure valid"
'''

[tasks."test:links"]
description = "Check for broken links"
run = "fd -e md -x markdown-link-check {}"
tools = {"fd" = "latest", "npm:markdown-link-check" = "latest"}

# ============================================================================
# DOCUMENTATION - Maintenance tasks
# ============================================================================

[tasks."docs:trees"]
description = "Update directory trees in documentation"
alias = "update-trees"
run = "./scripts/update-trees.sh"
sources = ["scripts/update-trees.sh", "**/README.md"]
[tasks."docs:serve"]
description = "Serve documentation locally"
run = '''
if [ -f "package.json" ] && grep -q '"serve"' package.json; then
  npm run serve
else
  echo "ℹ️  No serve script configured"
fi
'''

[tasks."docs:search"]
description = "Search documentation content"
run = '''
echo "Enter search term: "
read term
rg "$term" -t md --heading --line-number
'''
tools = {"rg" = "latest"}

# ============================================================================
# UTILITY - Helper tasks
# ============================================================================

[tasks.clean]
description = "Clean temporary files"
alias = "c"
run = '''
fd -H -I -t f -e DS_Store -x rm {}
fd -H -I -t f -e tmp -x rm {}
fd -H -I -t f -g '*~' -x rm {}
rm -rf .mise/cache 2>/dev/null || true
'''
tools = {"fd" = "latest"}

[tasks.watch]
description = "Watch files and run checks on change"
run = '''
echo "👀 Watching for changes (Ctrl+C to stop)..."
npx nodemon --watch '**/*.md' --watch '.markdownlint.json' --watch '.prettierrc.json' \
  --ext md --exec 'mise run check || true'
'''
tools = { "npm:nodemon" = "latest" }

[tasks.find]
description = "Find files by pattern"
run = '''
echo "Enter file pattern (e.g., '*.md', 'README*'): "
read pattern
fd "$pattern"
'''
tools = {"fd" = "latest"}

# Task aliases for common workflows
[tasks.p]
alias = "check"  # p for pre-commit