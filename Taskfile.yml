version: '3'

vars:
  PROJECT_DIR: '{{.PWD}}'
  SCRIPTS_DIR: '{{.PROJECT_DIR}}/scripts'

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Pre-commit checks
  pre-commit:
    desc: Run all pre-commit checks (lint, format, test)
    cmds:
      - task: lint
      - task: format-check
      - task: security
      - task: update-trees
      - echo "✅ All pre-commit checks passed!"

  # Linting tasks
  lint:
    desc: Run all linters
    cmds:
      - task: lint:markdown
      - task: lint:shell
      - echo "✅ All linting passed!"

  lint:markdown:
    desc: Lint markdown files
    cmds:
      - npx prettier --check "**/*.md"
      - markdownlint-cli2 "**/*.md" "!node_modules" --config .markdownlint.json
    sources:
      - "**/*.md"
      - .markdownlint.json

  lint:shell:
    desc: Lint shell scripts with shellcheck
    cmds:
      - |
        if command -v shellcheck >/dev/null 2>&1; then
          find . -name "*.sh" -type f -exec shellcheck {} \;
        else
          echo "⚠️  shellcheck not installed, skipping shell linting"
        fi
    sources:
      - "**/*.sh"

  # Formatting tasks
  format:
    desc: Auto-fix formatting issues where possible
    cmds:
      - task: format:markdown
      - echo "✅ Formatting complete!"

  format:markdown:
    desc: Auto-fix markdown formatting issues
    cmds:
      - npx prettier --write "**/*.md"
      - markdownlint-cli2 "**/*.md" "!node_modules" --config .markdownlint.json --fix
    sources:
      - "**/*.md"
      - .markdownlint.json

  format:markdown-aggressive:
    desc: Auto-fix markdown with more aggressive rules
    cmds:
      - |
        echo "🔧 Running aggressive markdown auto-fix..."
        # Prettier structural reflow
        npx prettier --write "**/*.md"
        # Semantic spacing / heading fixes (excluding node_modules)
        markdownlint-cli2 "**/*.md" "!node_modules" --config .markdownlint.json --fix
        echo "✅ Aggressive markdown fixes applied"
    sources:
      - "**/*.md"
      - .markdownlint.json

  format:bulk:
    desc: Run all bulk formatting operations
    cmds:
      - task: format:markdown
      - task: clean
      - echo "✅ All bulk formatting complete!"

  format-check:
    desc: Check if files are properly formatted (no changes)
    cmds:
      - |
        if git diff --quiet; then
          echo "✅ No uncommitted changes, format check passed"
        else
          echo "❌ Uncommitted changes detected. Please commit or stash changes before running format checks"
          exit 1
        fi

  # Security checks
  security:
    desc: Run security checks
    cmds:
      - task: security:actions
      - task: security:secrets
      - task: security:config
      - echo "✅ Security checks passed!"

  security:actions:
    desc: Check that GitHub Actions are pinned to commit SHAs
    cmds:
      - |
        if grep -r "uses:.*@v[0-9]" .github/workflows/ 2>/dev/null; then
          echo "❌ Found unpinned GitHub Actions (using @v tags instead of commit SHAs)"
          exit 1
        else
          echo "✅ All GitHub Actions are properly pinned to commit SHAs"
        fi
    sources:
      - ".github/workflows/**/*.yml"
      - ".github/workflows/**/*.yaml"

  security:secrets:
    desc: Check for potential secrets in files
    cmds:
      - |
        if command -v gitleaks >/dev/null 2>&1; then
          echo "🔍 Running gitleaks secret detection..."
          gitleaks detect --source . --verbose
        else
          echo "⚠️  gitleaks not installed, skipping secret detection"
          echo "   Install with: brew install gitleaks"
        fi
      - |
        if command -v detect-secrets >/dev/null 2>&1; then
          echo "🔍 Running detect-secrets scan..."
          if [ ! -f .secrets.baseline ]; then
            echo "📝 Creating secrets baseline..."
            detect-secrets scan --baseline .secrets.baseline
          else
            detect-secrets scan --baseline .secrets.baseline
          fi
        else
          echo "⚠️  detect-secrets not installed, install with: pip install detect-secrets"
        fi

  security:config:
    desc: Validate configuration files for security issues
    cmds:
      - |
        echo "🔍 Validating .mcp.json configuration..."
        if [ -f .mcp.json ]; then
          if grep -E '"[A-Z_]+":\s*"[^$]' .mcp.json; then
            echo "❌ Found hardcoded values in .mcp.json - use environment variables instead"
            exit 1
          else
            echo "✅ .mcp.json validation passed"
          fi
        fi
      - |
        echo "🔍 Checking for exposed secrets in tracked files..."
        if git diff --cached --name-only | grep -E '\.(env|key|pem|p12|pfx)$'; then
          echo "❌ Attempting to commit sensitive file types"
          exit 1
        else
          echo "✅ No sensitive file types in commit"
        fi

  # Code Quality Analysis
  quality:
    desc: Run comprehensive code quality analysis
    cmds:
      - task: lint
      - task: security
      - task: quality:metrics
      - echo "✅ Quality analysis complete!"

  quality:metrics:
    desc: Generate quality metrics and report
    cmds:
      - |
        echo "📊 Generating quality metrics..."
        echo "📁 Files: $(find . -name "*.md" | wc -l) markdown files"
        echo "📏 Lines: $(find . -name "*.md" -exec wc -l {} \; | awk '{sum+=$1} END {print sum}') total lines"
        echo "🔍 Issues: $(markdownlint-cli2 "**/*.md" --config .markdownlint.json 2>&1 | grep -c "MD" || echo "0") markdown issues"
        echo "🛡️  Security: $(grep -r "uses:.*@v[0-9]" .github/workflows/ 2>/dev/null | wc -l || echo "0") unpinned actions"

  quality:codacy:
    desc: Instructions for Codacy analysis via Claude Code MCP
    cmds:
      - |
        echo "🔍 For comprehensive Codacy analysis, use Claude Code:"
        echo "   use codacy mcp to check for issues"
        echo ""
        echo "   This provides:"
        echo "   - Security vulnerability scanning"
        echo "   - Code quality assessment"
        echo "   - Coverage analysis"
        echo "   - Detailed issue reports"

  # Documentation tasks
  docs:
    desc: Update documentation
    cmds:
      - task: update-trees
      - task: docs:validate
      - echo "✅ Documentation updated!"

  update-trees:
    desc: Update directory tree structures in documentation
    cmds:
      - "{{.SCRIPTS_DIR}}/update-trees.sh"
    sources:
      - "{{.SCRIPTS_DIR}}/update-trees.sh"
      - "**/*.md"

  docs:validate:
    desc: Validate documentation structure and links
    cmds:
      - |
        echo "🔍 Validating documentation structure..."
        # Check that all directories have README.md files
        for dir in mission-control flight-manuals star-charts maintenance-logs space-dictionary; do
          if [ ! -f "$dir/README.md" ]; then
            echo "❌ Missing README.md in $dir/"
            exit 1
          fi
        done
        echo "✅ Documentation structure validated"

  docs:serve:
    desc: Serve documentation locally (if using a static site generator)
    cmds:
      - |
        if [ -f "package.json" ]; then
          npm run serve 2>/dev/null || echo "⚠️  No 'serve' script found in package.json"
        else
          echo "ℹ️  No package.json found. Consider adding a static site generator."
        fi

  # Testing tasks
  test:
    desc: Run all tests
    cmds:
      - task: test:links
      - task: test:structure
      - echo "✅ All tests passed!"

  test:links:
    desc: Test that all internal links work
    cmds:
      - |
        if command -v markdown-link-check >/dev/null 2>&1; then
          find . -name "*.md" -exec markdown-link-check {} \;
        else
          echo "⚠️  markdown-link-check not installed, skipping link validation"
          echo "   Install with: npm install -g markdown-link-check"
        fi

  test:structure:
    desc: Test repository structure follows conventions
    cmds:
      - |
        echo "🔍 Testing repository structure..."
        # Check required directories exist
        for dir in mission-control flight-manuals star-charts maintenance-logs space-dictionary; do
          if [ ! -d "$dir" ]; then
            echo "❌ Required directory missing: $dir/"
            exit 1
          fi
        done
        echo "✅ Repository structure test passed"

  # Utility tasks
  clean:
    desc: Clean temporary files and caches
    cmds:
      - find . -name ".DS_Store" -delete 2>/dev/null || true
      - find . -name "*.tmp" -delete 2>/dev/null || true
      - find . -name "*~" -delete 2>/dev/null || true
      - echo "✅ Cleaned temporary files"

  install:
    desc: Install required tools
    cmds:
      - task: install:tools
      - echo "✅ Installation complete!"

  install:tools:
    desc: Install recommended tools for this project
    cmds:
      - |
        echo "📦 Installing recommended tools..."
        tools_to_install=""
        
        if ! command -v markdownlint-cli2 >/dev/null 2>&1; then
          tools_to_install="$tools_to_install markdownlint-cli2"
        fi
        
        if ! command -v shellcheck >/dev/null 2>&1; then
          echo "⚠️  shellcheck not found. Install with: brew install shellcheck"
        fi
        
        if ! command -v gitleaks >/dev/null 2>&1; then
          echo "⚠️  gitleaks not found. Install with: brew install gitleaks"
        fi
        
        if ! command -v detect-secrets >/dev/null 2>&1; then
          echo "⚠️  detect-secrets not found. Install with: pip install detect-secrets"
        fi
        
        if ! command -v markdown-link-check >/dev/null 2>&1; then
          tools_to_install="$tools_to_install markdown-link-check"
        fi
        
        if [ -n "$tools_to_install" ]; then
          echo "Installing npm packages:$tools_to_install"
          npm install -g $tools_to_install
        else
          echo "✅ All npm tools already installed"
        fi

  setup:pre-commit:
    desc: Setup and install pre-commit hooks
    cmds:
      - |
        echo "🔧 Setting up pre-commit hooks..."
        if ! command -v pre-commit >/dev/null 2>&1; then
          echo "⚠️  pre-commit not found. Install with: pip install pre-commit"
          exit 1
        fi
      - |
        echo "📦 Installing pre-commit hooks..."
        pre-commit install
        pre-commit install --hook-type commit-msg
        pre-commit install --hook-type pre-push
      - |
        echo "🔍 Running initial pre-commit check..."
        pre-commit run --all-files || echo "⚠️  Some checks failed - this is normal for first setup"
        echo "✅ Pre-commit hooks installed successfully!"

  # Git helpers
  git:hooks:
    desc: Install enhanced git hooks for pre-commit checks
    cmds:
      - |
        mkdir -p .git/hooks
        cat > .git/hooks/pre-commit << 'EOF'
        #!/bin/bash
        echo "🔍 Running enhanced pre-commit checks..."
        
        # Check for staged markdown files
        if git diff --cached --name-only | grep -q "\.md$"; then
          echo "📝 Markdown files detected, running auto-fix..."
          markdownlint-cli2 $(git diff --cached --name-only | grep "\.md$") --config .markdownlint.json --fix
          git add $(git diff --cached --name-only | grep "\.md$")
        fi
        
        # Run full pre-commit suite
        task pre-commit
        
        # Check if any files were modified during checks
        if [[ -n $(git diff --name-only) ]]; then
          echo "⚠️  Files were modified during pre-commit checks"
          echo "   Please review changes and commit again"
          exit 1
        fi
        
        echo "✅ All pre-commit checks passed!"
        EOF
        chmod +x .git/hooks/pre-commit
        echo "✅ Enhanced git pre-commit hook installed"

  git:hooks:simple:
    desc: Install simple git hooks (basic pre-commit checks)
    cmds:
      - |
        mkdir -p .git/hooks
        cat > .git/hooks/pre-commit << 'EOF'
        #!/bin/bash
        echo "🔍 Running pre-commit checks..."
        task pre-commit
        EOF
        chmod +x .git/hooks/pre-commit
        echo "✅ Basic git pre-commit hook installed"

  # CI/CD helpers
  ci:
    desc: Run the same checks as CI (for local verification)
    cmds:
      - task: pre-commit
      - task: test
      - echo "✅ CI checks passed locally!"