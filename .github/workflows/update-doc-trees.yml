name: Update Documentation Trees

on:
  push:
    branches: [main]
    paths:
      - "mission-control/**"
      - "flight-manuals/**"
      - "star-charts/**"
      - "maintenance-logs/**"
      - "space-dictionary/**"
  workflow_dispatch:

jobs:
  update-trees:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install tree command
        run: |
          sudo apt-get update
          sudo apt-get install -y tree

      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: '20'

      - name: Install Prettier
        run: npm install -g prettier@latest

      - name: Copy Prettier config
        run: |
          # Ensure Prettier uses the same config as the rest of the project
          if [ -f .prettierrc.json ]; then
            echo "Found .prettierrc.json"
          fi
          if [ -f .prettierignore ]; then
            echo "Found .prettierignore"
          fi

      - name: Update documentation trees
        run: |
          # Function to update tree in a file
          update_tree() {
            local file=$1
            local directory=$2
            local tree_flags=$3
            local marker_prefix=${4:-"TREE"}  # Default to TREE, can be DOCS-TREE, etc.
            
            if [[ ! -f "$file" ]]; then
              echo "Warning: File $file not found, skipping..."
              return
            fi
            
            # Check if file has tree markers
            if ! grep -q "<!-- ${marker_prefix}-START -->" "$file" || ! grep -q "<!-- ${marker_prefix}-END -->" "$file"; then
              echo "Warning: ${marker_prefix} markers not found in $file, skipping..."
              return
            fi
            
            echo "Updating ${marker_prefix} in: $file"
            
            # Generate tree and save to temporary file
            tree $directory $tree_flags > /tmp/tree_output.txt
            
            # Update the file between markers using Python
            python3 << EOF
          import re
          
          # Read the tree output
          with open('/tmp/tree_output.txt', 'r') as f:
              tree_output = f.read()
          
          # Read the target file
          with open('$file', 'r') as f:
              content = f.read()
          
          # Create the new tree content
          tree_content = f"\`\`\`plaintext\n{tree_output}\`\`\`"
          
          # Replace content between markers
          marker_prefix = "${marker_prefix}"
          pattern = f'<!-- {marker_prefix}-START -->.*?<!-- {marker_prefix}-END -->'
          replacement = f'<!-- {marker_prefix}-START -->\n{tree_content}\n<!-- {marker_prefix}-END -->'
          
          updated_content = re.sub(
              pattern,
              replacement,
              content,
              flags=re.DOTALL
          )
          
          # Write back to file
          with open('$file', 'w') as f:
              f.write(updated_content)
          EOF
          }
          
          # Update core-github-repos.md - main tree
          update_tree "mission-control/core-github-repos.md" "." "-L 2 -d -I '.git|node_modules|.DS_Store|.github|.cursor' --charset ascii" "TREE"
          
          # Update core-github-repos.md - docs tree
          update_tree "mission-control/core-github-repos.md" "." "-I '.git|node_modules|.DS_Store|.github|.cursor' --charset ascii" "DOCS-TREE"
          
          # Update README.md if it has markers
          update_tree "README.md" "." "-L 3 -d -I '.git|node_modules|.DS_Store|.github|.cursor' --charset ascii" "TREE"
          
          # Add more files as needed

      - name: Format with Prettier
        run: |
          echo "Running Prettier to format markdown files..."
          prettier --write '**/*.md' --ignore-path .prettierignore || true
          echo "Formatting complete"

      - name: Commit changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add -A
          if [[ -z $(git status -s) ]]; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "ðŸ¤– Auto-update documentation trees"
          echo "Changes committed; will create PR in next step"

      - name: Create Pull Request
        if: ${{ success() }}
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7.0.8
        with:
          commit-message: "ðŸ¤– Auto-update documentation trees"
          branch: auto/update-doc-trees-${{ github.run_id }}
          delete-branch: true
          title: "ðŸ¤– Auto-update documentation trees"
          body: |
            Automated update of documentation trees.

            Generated by update-doc-trees workflow run `${{ github.run_id }}`.
          base: main
